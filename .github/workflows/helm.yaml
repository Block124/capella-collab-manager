# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: CC0-1.0

name: Validate helm templates

on:
  push:
    branches: ['**']
    tags: ["v*.*.*"]
  pull_request:
    branches: [main, staging]

jobs:
  validate-chart:
    runs-on: ubuntu-latest
    name: Validate helm chart with linter and kubernetes yaml schemas
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install helm
        uses: azure/setup-helm@v3
      - name: Install go
        uses: actions/setup-go@v3
      - name: Install kubeconform
        run: |
          go install github.com/yannh/kubeconform/cmd/kubeconform@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Run helm lint
        run: |
          helm lint --strict ./helm
      - name: Validate chart with kubernetes schema
        run : |
          helm template ./helm | kubeconform -strict
  install-chart:
    runs-on: ubuntu-latest
    name: Install chart in kind cluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install helm
        uses: azure/setup-helm@v3
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Resolve base image
        # Extract tag from docker metadata
        id: tag
        run: |
          export IMAGE=${{ steps.meta.outputs.tags }}
          echo "::set-output name=tag::${IMAGE##*:}"
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0
      - name: Create sessions namespace
        run: |
          kubectl create namespace t4c-sessions
      - name: Install chart
        run: |
          helm install test ./helm
      - name: Wait for all containers to be ready
        run: |
          kubectl wait --all --for=condition=Ready pods --timeout=5m
      - name: Print status of Pods
        if: always()
        run: |
          kubectl get pods
      - name: Print logs of backend container
        if: always()
        run: |
          kubectl logs deployment/test-t4c-manager-backend
