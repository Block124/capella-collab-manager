apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-<name>
  labels: 
    id: {{ .Release.Name }}-deployment-<name>
spec:
  replicas: {{ .Values.replicaCount }}
  selector: 
    matchLabels: 
      id: {{ .Release.Name }}-deployment-<name>
  template:
    metadata: 
      labels: 
        id: {{ .Release.Name }}-deployment-<name>
    spec:
      volumes:
        # Example ConfigMap
        - name: {{ .Release.Name }}-<name>
          configMap:
            name: {{ .Release.Name }}-<name>
        # Example Persistent Storage
        - name: {{ .Release.Name }}-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-volume
      containers:
        - name: {{ .Release.Name }}-<name>
          image: "{{ .Values.image.repository }}/base:latest"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DEMO
              value: "TEST"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            # Example ConfigMap
            - name: {{ .Release.Name }}-<name>
              mountPath: /path/to/mount
            # Example Persistent Storage
            - name: {{ .Release.Name }}-volume
              mountPath: /data
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
